%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals WHILE, IF, ELSE, RETURN, LP, RP, LB, RB, ASSIGN, ADD, SUB, MUL,
DIV, MOD, GT, LT, GE, LE, EQ, NE, SEMI, COMMA, ID, NUMERAL, INT, READ, PRINT;

%typeof program		= "Program";
%typeof param		= "Param";

%typeof func_decl_list	= "List";
%typeof func_param_list	= "List";
%typeof func_expr_list	= "List";
%typeof stmt_list		= "List";

%typeof block 		= "Block";
%typeof opt_block	= "Opt";

%typeof expr 		= "Expr";
%typeof binexpr		= "BinExpr";
%typeof condexpr	= "CondExpr";
%typeof numexpr 	= "NumExpr";

%typeof stmt		= "Stmt";
%typeof while		= "WhileStmt";
%typeof if 			= "IfStmt";
%typeof return		= "ReturnStmt";
%typeof assign 		= "AssignStmt";
%typeof decl 		= "DeclStmt";
%typeof print		= "PrintStmt";

%typeof id_use 		= "IdUseExpr";
%typeof int_use 	= "IntUseExpr";
%typeof func_use 	= "FuncUseExpr";
%typeof id_decl 	= "IdDecl";
%typeof func_decl	= "FuncDecl";

%typeof func_read	= "ReadFunc";

%goal program;

program = func_decl_list.a {: return new Program(a); :};

func_decl_list =
		  func_decl.a 						{: return new List().add(a);:}
		| func_decl_list.a func_decl.b 		{: return a.add(b); 		:}
		;
func_param_list =
		  param.a 							{: return new List().add(a);:}
		| func_param_list.a COMMA param.b 	{: return a.add(b); 		:}
		;
func_expr_list =
		  expr.a 							{: return new List(a);		:}
		| func_expr_list.a COMMA expr.b 	{: return a.add(b); 		:}
		;
stmt_list =
		  stmt.a 							{: return new List().add(a);:}
		| stmt_list.a stmt.b 				{: return a.add(b);   		:}
		; 
func_decl 	= INT id_decl.a LP func_param_list.par RP block.b 	{: return new FuncDecl(a, par, b);  :};
id_decl 	= ID.id			 									{: return new IdDecl(id); 			:};
block 		= LB stmt_list.a RB 								{: return new Block(a);				:};
param 		= INT id_use.id										{: return new Param(id); 			:};

opt_block =
		  ELSE block.a						{: return new Opt(a); 		:}
		|									{: return new Opt();  		:}
		;			

stmt	= while | if | return | assign | decl | print;

while 	= WHILE LP condexpr.a RP block.b			{: return new WhileStmt(a,b);	:};
if		= IF LP condexpr.a RP block.b opt_block.c	{: return new IfStmt(a,b,c);	:};
return 	= RETURN expr.a SEMI						{: return new ReturnStmt(a);	:};
assign 	= id_use.a ASSIGN expr.b SEMI				{: return new AssignStmt(a,b);	:};
decl 	= INT id_decl.a SEMI						{: return new DeclStmt(a); 		:};
print	= PRINT LP expr.a RP SEMI					{: return new PrintStmt(a);		:};
			
expr 	= numexpr | binexpr | condexpr;
numexpr = func_use | func_read | int_use | id_use;
		
id_use		= ID.id									{: return new IdUseExpr(id);	:};
int_use		= NUMERAL.num							{: return new IntUseExpr(num);	:};
func_use	= id_use.a LP func_expr_list.b RP		{: return new FuncUseExpr(a, b);:};
func_read	= READ LP RP							{: return new ReadFunc();		:};

binexpr =
		 expr.a MUL numexpr.b						{: return new Mul(a, b); :}
		|expr.a DIV numexpr.b						{: return new Div(a, b); :}
		|expr.a MOD numexpr.b						{: return new Mod(a, b); :}
		|expr.a ADD numexpr.b						{: return new Add(a, b); :}
		|expr.a SUB numexpr.b						{: return new Sub(a, b); :}
		;

condexpr = 
		 expr.a GT numexpr.b						{: return new GT(a, b); :}
		|expr.a LT numexpr.b						{: return new LT(a, b); :}
		|expr.a GE numexpr.b						{: return new GE(a, b); :}
		|expr.a LE numexpr.b						{: return new LE(a, b); :}
		|expr.a EQ numexpr.b						{: return new EQ(a, b); :}
		|expr.a NE numexpr.b						{: return new NE(a, b); :}
		;
