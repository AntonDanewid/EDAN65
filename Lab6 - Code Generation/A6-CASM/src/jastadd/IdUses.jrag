import java.util.Set;
import java.util.HashSet;

aspect IdUses {
	syn	Set<FuncDecl> FuncDecl.reachable() circular [new HashSet<FuncDecl>()] {	
		HashSet<FuncDecl> result = new HashSet<FuncDecl>();
		for	(FuncDecl f : functionCalls())	{
			result.add(f);	
			result.addAll(f.reachable());	
		}
		return result;	
	}		

	coll HashSet<FuncDecl> FuncDecl.functionCalls() [new HashSet<FuncDecl>()] with add;	
		FuncUseExpr contributes decl().func()
		to FuncDecl.functionCalls()	
		for enclosingFunction();

			// FuncDecl f√•r FuncUse element som finns i Blocket
	eq FuncDecl.getBlock().encloseLookup() = this;

	inh FuncDecl FuncUseExpr.encloseLookup();
	syn FuncDecl FuncUseExpr.enclosingFunction() = encloseLookup();

	eq  FuncDecl.getChild().funcLookup() = this;
	inh FuncDecl FuncIdDecl.funcLookup();
	syn FuncDecl FuncIdDecl.func() = funcLookup();
	inh FuncDecl Stmt.funcLookup();
	syn FuncDecl Stmt.func() = funcLookup();

}