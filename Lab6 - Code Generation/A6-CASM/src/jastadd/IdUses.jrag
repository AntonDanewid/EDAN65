import java.util.Set;
import java.util.HashSet;

aspect IdUses {
	//	coll HashSet<IdUseExpr> IdDecl.uses() [new HashSet<IdUseExpr>()] with add;	
	//		IdUseExpr contributes this
	//		to IdDecl.uses()	
	//		for decl();

	// FuncIdDecl f책r ett element n채r FuncUseExpr f책r en decl()


	syn	Set<FuncDecl> FuncDecl.reachable() circular [new HashSet<FuncDecl>()] {	
		HashSet<FuncDecl> result = new HashSet<FuncDecl>();
		for	(FuncDecl f : functionCalls())	{
			result.add(f);	
			result.addAll(f.reachable());	
		}
		return result;	
	}		

	coll HashSet<FuncDecl> FuncDecl.functionCalls() [new HashSet<FuncDecl>()] with add;	
		FuncUseExpr contributes decl().func()
		to FuncDecl.functionCalls()	
		for enclosingFunction();

			// FuncDecl f책r FuncUse element som finns i Blocket
	eq FuncDecl.getBlock().encloseLookup() = this;

	inh FuncDecl FuncUseExpr.encloseLookup();
	syn FuncDecl FuncUseExpr.enclosingFunction() = encloseLookup();



	eq  FuncDecl.getName().funcLookup() = this;
	inh FuncDecl FuncIdDecl.funcLookup();
	syn FuncDecl FuncIdDecl.func() = funcLookup();

}