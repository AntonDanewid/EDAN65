aspect CodeGen {


	public abstract void Func.genEval(PrintStream out);
	public void Program.genCode(PrintStream out) {
		out.println(".global _start");
		out.println(".data");
		out.println("ask_message: .ascii \"Please enter a number: \"");
		out.println("ask_msg_len: .quad 23");
		out.println("buf: .skip 1024");
		out.println();
		out.println(".text");
		out.println("_start:");
		
		// call main
		out.println("    	call " + main().getName().getID());

		// call sys_exit:
		out.println("    	movq $0, %rdi");
		out.println("    	movq $60, %rax");
		out.println("    	syscall"); // done!
		main().genEval(out); // stores result in RAX
		
		for(Func f : getFuncList()) {
			if(f != main())
				f.genEval(out);
		}
		
		// helper functions
		out.println("# Procedure to read number from stdin");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # %rax = sys_read(0, buf, 1024)");
		out.println("        ### convert string to integer:");
		out.println("        ### %rax contains nchar");
		out.println("        ### %rsi contains ptr");
		out.println("        movq $0, %rdx           # sum = 0");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rbx     # move byte, and sign extend to qword");
		out.println("        cmpq $0x30, %rbx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rbx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rbx        # value of character");
		out.println("        addq %rbx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # return value in RAX");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### convert integer to string");
//		out.println("        movq 16(%rbp), %rax     # parameter");
		out.println("        movq $(buf+1023), %rsi  # write ptr (start from end of buf)");
		out.println("        movb $0x0a, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # string length");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rbx");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rbx              # divide rdx:rax by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
	}
	
	public abstract void 	Expr.genEval(PrintStream out);
	public void FuncDecl.genEval(PrintStream out) {
		out.println(getName().getID() + ": \t\t # Has " + numLocals() + " funclocals, and " + getBlock().numLocals() + " blocklocals");
		out.println("    	pushq %rbp");
		out.println("    	movq %rsp, %rbp");
		for(Param p : getParams()) {
			p.genEval(out);
		}
		
		// allocate space for local variables:
		out.println("    	subq $" + (getBlock().numLocals()*8) + ", %rsp");
		getBlock().genEval(out);
	}

	public void Block.genEval(PrintStream out) {
		for(Stmt s : getStmtList()) {
			s.genEval(out);
		}
	}

	public void BoolLiteral.genEval(PrintStream out) {
		int result =  getBOOLEAN().equals("true") ? 1 : 0;
		out.println("        movq $" + result + ", %rax");
	}

	public void IntLiteral.genEval(PrintStream out) {
		out.println("        movq $" + getNUMERAL() + ", %rax");
	}

	public void Add.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        addq %rbx, %rax");
	}

	public void Sub.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        subq %rbx, %rax");
	}

	public void Mul.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        imulq %rbx, %rax");
	}

	public void Div.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
		out.println("        idivq %rbx");
	}

	public void Mod.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        imulq %rbx, %rax");
	}

	public void GT.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmpq %rbx, %rax \t # the result of the boolean operation EQ is in %al, which resides within %rax");
		out.println("        jg gt_" + localIndex());
		out.println("        jmp ngt_" + localIndex());
		out.println("gt_" + localIndex() +":");
		out.println("        movq $1, %rax");
		out.println("        jmp done_" + localIndex());
		out.println("ngt_" + localIndex() +":");
		out.println("        movq $0, %rax");
		out.println("done_" + localIndex() + ":");
	}
	
	public void LT.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmpq %rbx, %rax \t # the result of the boolean operation EQ is in %al, which resides within %rax");
		out.println("        jl lt_" + localIndex());
		out.println("        jmp nlt_" + localIndex());
		out.println("lt_" + localIndex() +":");
		out.println("        movq $1, %rax");
		out.println("        jmp done_" + localIndex());
		out.println("nlt_" + localIndex() +":");
		out.println("        movq $0, %rax");
		out.println("done_" + localIndex() + ":");
	}
	
	public void GE.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmpq %rbx, %rax \t # the result of the boolean operation EQ is in %al, which resides within %rax");
		out.println("        jge geq_" + localIndex());
		out.println("        jmp ngeq_" + localIndex());
		out.println("geq_" + localIndex() +":");
		out.println("        movq $1, %rax");
		out.println("        jmp done_" + localIndex());
		out.println("ngeq_" + localIndex() +":");
		out.println("        movq $0, %rax");
		out.println("done_" + localIndex() + ":");
	}
	
	public void LE.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmpq %rbx, %rax \t # the result of the boolean operation EQ is in %al, which resides within %rax");
		out.println("        jle leq_" + localIndex());
		out.println("        jmp nleq_" + localIndex());
		out.println("leq_" + localIndex() +":");
		out.println("        movq $1, %rax");
		out.println("        jmp done_" + localIndex());
		out.println("nleq_" + localIndex() +":");
		out.println("        movq $0, %rax");
		out.println("done_" + localIndex() + ":");
	}
	
	public void EQ.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmpq %rbx, %rax \t # the result of the boolean operation EQ is in %al, which resides within %rax");
		out.println("        movq $0, %rax");
		out.println("        sete %al");
	}
	
	public void NE.genEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
		out.println("        cmpq %rbx, %rax \t # the result of the boolean operation EQ is in %al, which resides within %rax");
		out.println("        jne neq_" +  + localIndex());
		out.println("        cmpq %rbx, %rax \t # the result of the boolean operation EQ is in %al, which resides within %rax");
		out.println("        jne nneq_" + localIndex());
		out.println("neq_" + localIndex() +":");
		out.println("        movq $1, %rax");
		out.println("        jmp done_" + localIndex());
		out.println("nneq_" + localIndex() +":");
		out.println("        movq $0, %rax");
		out.println("done_" + localIndex() + ":");
	}

	public void IdUseExpr.genEval(PrintStream out) {
		out.println("    	movq " + decl().address() + ", %rax \t # put " + prettyString() + " into  %rax");
	}

	public abstract void 	Stmt.genEval(PrintStream out);
	public void DeclAssignStmt.genEval(PrintStream out) {
		out.println("\n        # executing '" + "int " + getIdDecl().prettyString() + " = " + getExpr().prettyString() + ";" + "'");
		getExpr().genEval(out);
		out.println("        movq %rax, " + getIdDecl().address() + "\t # move %rax to " + getIdDecl().getID());
	}
	
	public void AssignStmt.genEval(PrintStream out){
		out.println("\n        # executing '" + getIdUseExpr().prettyString()  + " = " + getExpr().prettyString() + ";" + "'");
		getExpr().genEval(out);
		out.println("    	movq %rax, " + getIdUseExpr().decl().address() + "\t # put %rax into " + getIdUseExpr().prettyString());
	}

	public void DeclStmt.genEval(PrintStream out){ }


	public void ReturnStmt.genEval(PrintStream out) {
		out.println("# return stmt ");
		getExpr().genEval(out);
		out.println("    	movq %rbp, %rsp");
		out.println("    	popq %rbp");
		out.println("    	ret");
	}

	public void IfStmt.genEval(PrintStream out){
		getExpr().genEval(out);
		out.println("        cmpq $1, %rax");
		out.println("        jne " + uniqueName() + "_else_lbl # go to else_lbl if %rax < 10");
		out.println(uniqueName() + "_then_lbl:");
		out.println("        # then body");
		getThen().genEval(out);
		out.println("        jmp " + uniqueName() + "_fi");
		out.println(uniqueName() + "_else_lbl:");
		if(hasElse()) getElse().genEval(out);
		out.println(uniqueName() + "_fi:");
		out.println("        # done");
	}
	public void WhileStmt.genEval(PrintStream out){
		out.println(uniqueName() + "_loop_start:");
		getExpr().genEval(out);
		out.println("        cmpq $1, %rax");
		out.println("        jne " + uniqueName() + "_loop_end");
		getBlock().genEval(out);
		out.println("        jmp " + uniqueName() + "_loop_start");
		out.println(uniqueName() + "_loop_end: ");
	}

	public void CallStmt.genEval(PrintStream out){
		for(int i = getFuncUseExpr().getNumExpr() - 1; i >= 0; --i) {
			
			getFuncUseExpr().getExpr(i).genEval(out);
			out.println("        pushq %rax \t # Param i = " + i);
		}
		out.println("        call " + getFuncUseExpr().getID());
	}
	public void Param.genEval(PrintStream out){
		out.println("        movq " + getIdDecl().addressPositive() +", %rax");
		out.println("        pushq %rax");
	}
	
	public void FuncUseExpr.genEval(PrintStream out) {
		for(int i = getNumExpr() - 1; i >= 0; --i) {
			getExpr(i).genEval(out);
			out.println("        pushq %rax\t # Param i = " + i);
		}
		out.println("        call " + getID());
	}

	syn String FuncIdDecl.label() = getID() + ":";
	syn String FuncDecl.label() = getName().label();

	syn int Stmt.numTmps() = 0;
	syn int ReturnStmt.numTmps() = 1;
	syn int CallStmt.numTmps() = getFuncUseExpr().getNumExpr();

	/**
	 * Address of local variable variable in the current stack frame.
	 */
	syn String IdDecl.address() = "-"+(localIndex()*8)+"(%rbp)";
	syn String IdDecl.addressPositive() = (localIndex()*8 +8)+"(%rbp)";

	/**
	 * Local variable counting.
	 */
	syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

	/**
	 * Local variable numbering.
	 */
	syn int ASTNode.localIndex() = prevNode().localIndex();
	eq Program.localIndex() = 0;
	eq FuncDecl.localIndex() = 0;
	eq IdDecl.localIndex() = prevNode().localIndex() + 1;

	inh ASTNode ASTNode.prevNode();
	eq ASTNode.getChild(int i).prevNode() = prevNode(i);
	syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
	syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;
}
