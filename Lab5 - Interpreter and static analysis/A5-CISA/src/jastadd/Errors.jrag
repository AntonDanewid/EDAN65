import java.util.Set;
import java.util.TreeSet;

aspect Errors {
	public class ErrorMessage implements Comparable<ErrorMessage> {
		protected final String message;
		protected final int lineNumber;
		public ErrorMessage(String message, int lineNumber) {
			this.message = message;
			this.lineNumber = lineNumber;
		}
		public int compareTo(ErrorMessage other) {
			if (lineNumber == other.lineNumber) {
				return message.compareTo(other.message);
			}
			return Integer.compare(lineNumber, other.lineNumber); 
		}
		public String toString() {
			return "Error at line " + lineNumber + ": " + message;
		}
	} 
	protected ErrorMessage ASTNode.error(String message) {
		return new ErrorMessage(message, getLine(getStart()));
	}

	// Another example
	// BY using a [new Counter()] class we can similarily keep track of number of declarations of a type or class
	coll Set<ErrorMessage> Program.errors() [new TreeSet<ErrorMessage>()] with add root Program;

	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
}



aspect ErrorContributions {
	// contributes the following error when the decl isUnknown 
	IdUseExpr contributes error("symbol '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program(); // restricted to children of program

	IdDecl contributes error("symbol '" + getID() + "' is already declared!")
		when isMultiplyDeclared()
		to Program.errors() for program();
	
	IdUseExpr contributes error("symbol '" + getID() + "' has no value assigned to it")
		when !isAssigned()
		to Program.errors() for program(); // restricted to children of program
	
//	IdDecl contributes error("symbol '" + getID() + "' is already declared!")
//		when !isAssigned()
//		to Program.errors() for program();
							
	IdUseExpr contributes error("the definition of symbol '" + getID() + "' is circular")
		when isCircular()
		to Program.errors() for program();
				
	FuncIdDecl contributes error("function '" + getID() + "' is already declared!")
		when isMultiplyDeclared()
		to Program.errors() for program();
	
	FuncUseExpr contributes error("function '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program(); // restricted to children of program

	AssignStmt contributes error("Assignment to '" + getIdUseExpr().type().getType() + " " + getIdUseExpr().getID() + "' is incompatible with type '" + getExpr().type().getType() + "'")
		when !compatibleTypes()
		to Program.errors() for program(); // restricted to children of program

	DeclAssignStmt contributes error("Assignment to '" + getIdDecl().type().getType() + " " + getIdDecl().getID() + "' is incompatible with type '" + getExpr().type().getType() + "'")
		when !compatibleTypes()
		to Program.errors() for program(); // restricted to children of program
	
	FuncUseExpr contributes error(prettyError)
		when !compatibleFunctionArgumentNumber()
		to Program.errors() for program(); // restricted to children of program
	
	FuncUseExpr contributes error(prettyError)
		when !compatibleArgumentType()
		to Program.errors() for program(); // restricted to children of program
		
}
