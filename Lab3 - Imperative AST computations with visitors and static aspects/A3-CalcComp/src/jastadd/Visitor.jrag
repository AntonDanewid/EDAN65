aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(FuncDecl node, Object data);
		public Object visit(Block node, Object data);
		
		//STMT:s
		public Object visit(IfStmt node, Object data);
		public Object visit(ReturnStmt node, Object data);
		public Object visit(AssignStmt node, Object data);
		public Object visit(DeclStmt node, Object data);
		public Object visit(PrintStmt node, Object data);
		public Object visit(WhileStmt node, Object data);
		public Object visit(DeclAssignStmt node, Object data);
		
		
		// Expr
		public Object visit(IntLiteral node, Object data);
		public Object visit(IdUseExpr node, Object data);
		public Object visit(FuncUseExpr node, Object data);
		public Object visit(ReadFunc node, Object data);
				
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Sub node, Object data);

		// Logical Expr
		public Object visit(GT node, Object data);
		public Object visit(LT node, Object data);
		public Object visit(GE node, Object data);
		public Object visit(LE node, Object data);
		public Object visit(EQ node, Object data);
		public Object visit(NE node, Object data);

		// No abstract class
		public Object visit(IdDecl node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}

	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object FuncDecl.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object Block.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	
	//STMT:s
	public Object IfStmt.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object ReturnStmt.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object AssignStmt.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object DeclStmt.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object PrintStmt.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object WhileStmt.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object DeclAssignStmt.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	
	// Expr		
	public Object IntLiteral.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object IdUseExpr.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object FuncUseExpr.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object ReadFunc.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
			
	public Object Mul.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object Add.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	
	public Object GT.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object LT.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object GE.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object LE.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object EQ.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
	public Object NE.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}

	// No abstract class
	public Object IdDecl.accept(Visitor visitor, Object data){
		return visitor.visit(this, data);
	}
}
